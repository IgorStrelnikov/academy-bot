
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart
from aiogram.types import ReplyKeyboardRemove
from datetime import datetime
import asyncio
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
SPREADSHEET_NAME = os.getenv("SPREADSHEET_NAME")
CHANNEL_ID = os.getenv("CHANNEL_ID")  # –ü—Ä—è–º–æ–π ID –∫–∞–Ω–∞–ª–∞

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("google_credentials.json", scope)
client = gspread.authorize(creds)
sheet = client.open(SPREADSHEET_NAME).sheet1

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
class Form(StatesGroup):
    waiting_for_response = State()

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞
@dp.message(CommandStart(deep_link=True))
async def start(message: types.Message, state: FSMContext, command: CommandStart):
    source = command.args or "–Ω–µ —É–∫–∞–∑–∞–Ω"
    await state.update_data(source=source)
    await message.answer(
        "üëã –ê–∫–∞–¥–µ–º–∏—è <b>¬´–ë–µ–Ω–µ—Ñ–∞–∫—Ç–æ—Ä¬ª</b> –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Å!\n\n"
        "–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ò–∑—É—á–∏—Ç—å –≤–≤–æ–¥–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —É—Ä–æ–∫–∏\n"
        "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ê–∫–∞–¥–µ–º–∏–∏\n"
        "‚Ä¢ –ü—Ä–æ–π—Ç–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏ (–≤ —Å—Ç–∞–¥–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)\n"
        "‚Ä¢ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ–±—É—á–µ–Ω–∏—é –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –≥—Ä—É–ø–ø–µ\n"
        "‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≤–∏–¥–µ–æ–≤—Å—Ç—Ä–µ—á–∞—Ö —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏\n"
        "‚Ä¢ –ò —Å–ø–æ–∫–æ–π–Ω–æ –ø–æ–Ω—è—Ç—å, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –≤–∞–º –Ω–∞—à–µ –æ–±—É—á–µ–Ω–∏–µ\n\n"
        "‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫—É—é –ø–æ–ª—å–∑—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏ –∫–∞–∫–∏–µ –±–æ–ª–∏ –∏–ª–∏ –∑–∞–¥–∞—á–∏ —Å—Ç—Ä–µ–º–∏—Ç–µ—Å—å —Ä–µ—à–∏—Ç—å —Å –Ω–∞—à–µ–π –ø–æ–º–æ—â—å—é."
    )
    await state.set_state(Form.waiting_for_response)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
@dp.message(Form.waiting_for_response)
async def handle_response(message: types.Message, state: FSMContext):
    data = await state.get_data()
    source = data.get("source", "–Ω–µ —É–∫–∞–∑–∞–Ω")
    user = message.from_user
    response = message.text

    # –õ–æ–≥ –≤ Google –¢–∞–±–ª–∏—Ü—É
    sheet.append_row([
        datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        user.full_name,
        f"@{user.username}" if user.username else "‚Äî",
        source,
        response
    ])

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
    try:
        await bot.add_chat_member(chat_id=CHANNEL_ID, user_id=user.id)
        await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã –¥–æ–±–∞–≤–∏–ª–∏ –≤–∞—Å –≤ –∫–∞–Ω–∞–ª üéâ", reply_markup=ReplyKeyboardRemove())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –≤ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

    await state.clear()

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
