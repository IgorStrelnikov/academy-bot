
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import CommandStart
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.client.default import DefaultBotProperties
import asyncio
from datetime import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import os

BOT_TOKEN = os.getenv("BOT_TOKEN")
SPREADSHEET_NAME = os.getenv("SPREADSHEET_NAME")
CHANNEL_ID = os.getenv("CHANNEL_ID")  # üëà –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è chat_id –∫–∞–Ω–∞–ª–∞

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("google_credentials.json", scope)
client = gspread.authorize(creds)
sheet = client.open(SPREADSHEET_NAME).sheet1

# –ë–æ—Ç
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

class Form(StatesGroup):
    waiting_for_motivation = State()

@dp.message(CommandStart(deep_link=True))
async def start_with_source(message: Message, state: FSMContext, command: CommandStart):
    source = command.args or "–Ω–µ —É–∫–∞–∑–∞–Ω"
    await state.update_data(source=source)
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
        "–ü—Ä–µ–∂–¥–µ —á–µ–º –º—ã –¥–æ–±–∞–≤–∏–º —Ç–µ–±—è –≤ –Ω–∞—à –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –ê–∫–∞–¥–µ–º–∏–∏ –ë–µ–Ω–µ—Ñ–∞–∫—Ç–æ—Ä,\n\n"
        "<b>–Ω–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:</b>\n"
        "¬´–ß—Ç–æ–±—ã –º—ã –ø–æ–Ω–∏–º–∞–ª–∏, —á—Ç–æ –¥–ª—è —Ç–µ–±—è –≤–∞–∂–Ω–æ ‚Äî –Ω–∞–ø–∏—à–∏,\n"
        "–∫–∞–∫—É—é –ø–æ–ª—å–∑—É —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç —É—á–∞—Å—Ç–∏—è –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ?¬ª\n\n"
        "‚úçÔ∏è –ü–∞—Ä–∞ —Å–ª–æ–≤ ‚Äî —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ."
    )
    await state.set_state(Form.waiting_for_motivation)

@dp.message(Form.waiting_for_motivation)
async def handle_motivation(message: Message, state: FSMContext):
    data = await state.get_data()
    source = data.get("source", "–Ω–µ —É–∫–∞–∑–∞–Ω")
    motivation = message.text
    user = message.from_user

    # –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É
    sheet.append_row([
        datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        user.full_name,
        f"@{user.username}" if user.username else "‚Äî",
        source,
        motivation
    ])

    try:
        await bot.add_chat_member(chat_id=CHANNEL_ID, user_id=user.id)
        await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã –¥–æ–±–∞–≤–∏–ª–∏ —Ç–µ–±—è –≤ –∫–∞–Ω–∞–ª üéâ", reply_markup=ReplyKeyboardRemove())
    except Exception as e:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–±—è –≤ –∫–∞–Ω–∞–ª. –ù–∞–ø–∏—à–∏ –Ω–∞–º –Ω–∞–ø—Ä—è–º—É—é.")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {e}")

    await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
